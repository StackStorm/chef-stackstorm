#! /bin/sh
### BEGIN INIT INFO
# Provides:          <%= @service_name %>
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: St2 service <%= @service_name %>
# Description:       Debian sysvinit file for <%= @service_name %>
#
### END INIT INFO

# Author: chef-client
#

# Do NOT "set -e"

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="<%= @service_name %>"
NAME=<%= @service_name %>
DAEMON=<%= @python %> 
DAEMON_ARGS="<%= @service_bin %> --config-file <%= @config_file %>"
PIDFILE=/var/run/st2actionrunner/$NAME.pid
SCRIPTNAME=/etc/init.d/<%= @service_name %>

# prepare parent pid directory
mkdir /var/run/st2actionrunner 1>/dev/null 2>/dev/null

# Exit if the package is not installed
[ -x <%= @service_bin %> ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions


do_start()
{
  RETVAL=0
  ls -1 /etc/init.d/st2actionrunner-* | while read init_file; do
    /etc/init.d/$init_file start
  done
  return 0
}

#
# Function that stops the daemon/service
#
do_stop()
{
  RETVAL=0
  ls -1 /etc/init.d/st2actionrunner-* | while read init_file; do
    /etc/init.d/$init_file stop
  done
  return 0
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
  ls -1 /var/run/st2actionrunner/st2actionrunner-*.pid | while read pid_file; do
    start-stop-daemon --stop --signal 1 --quiet --pidfile /var/run/st2actionrunner/$pid_file
  done
  return 0
}

case "$1" in
  start)
  [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
  do_start
  case "$?" in
    0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
    2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
  esac
  ;;
  stop)
  [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
  do_stop
  case "$?" in
    0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
    2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
  esac
  ;;
  status)
  exit 0
  ;;
  #reload|force-reload)
  #
  # If do_reload() is not implemented then leave this commented out
  # and leave 'force-reload' as an alias for 'restart'.
  #
  #log_daemon_msg "Reloading $DESC" "$NAME"
  #do_reload
  #log_end_msg $?
  #;;
  restart|force-reload)
  #
  # If the "reload" option is implemented then remove the
  # 'force-reload' alias
  #
  log_daemon_msg "Restarting $DESC" "$NAME"
  do_stop
  case "$?" in
    0|1)
    do_start
    case "$?" in
      0) log_end_msg 0 ;;
      1) log_end_msg 1 ;; # Old process is still running
      *) log_end_msg 1 ;; # Failed to start
    esac
    ;;
    *)
    # Failed to stop
    log_end_msg 1
    ;;
  esac
  ;;
  *)
  #echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
  echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
  exit 3
  ;;
esac

:
